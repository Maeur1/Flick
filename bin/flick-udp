#!/usr/bin/env python

import argparse
import signal
import flicklib
import time
import curses
import socket
import json
from curses import wrapper

some_value = 5000
sendFrequency = 100 #Hz to send the packets

@flicklib.move()
def move(x, y, z):
    global xval
    global yval
    global zval
    xval = x
    yval = y
    zval = z

@flicklib.flick()
def flick(start,finish):
    global flicktxt
    flicktxt = start + ' - ' + finish

@flicklib.airwheel()
def spinny(delta):
    global airwheeldelta
    airwheeldelta = delta

@flicklib.double_tap()
def doubletap(position):
    global doubletaptxt
    doubletaptxt = position

@flicklib.tap()
def tap(position):
    global taptxt
    taptxt = position

@flicklib.touch()
def touch(position):
    global touchtxt
    touchtxt = position

#
# Main display using curses
#

def main():
    global xval
    global yval
    global zval
    global flicktxt
    global airwheeldelta
    global touchtxt
    global taptxt
    global doubletaptxt

    xval = 0
    yval = 0
    zval = 0
    flicktxt = ''
    airwheeldelta = 0
    touchtxt = ''
    taptxt = ''
    doubletaptxt = ''

    fw_info = flicklib.getfwinfo()

    parser = argparse.ArgumentParser()
    parser.add_argument("address", help="Hostname or IP address to send data to");
    parser.add_argument("port", help="UDP port to send data to")
    args = parser.parse_args()

    sock = socket.socket(socket.AF_INET,
                         socket.SOCK_DGRAM)

    data = {}
    previous_data = {}
    print "Sending Data Now"

    # Update data window continuously until Control-C
    while True:
        data['x'] = xval
        data['y'] = yval
        data['z'] = zval
        data['tap'] = taptxt
        data['doubletap'] = doubletaptxt
        data['touch'] = touchtxt
        data['airwheel'] = airwheeldelta
        data['flick'] = flicktxt
        json_data = json.dumps(data)
        if (json_data != previous_data):
            sock.sendto(json_data, (args.address, int(args.port)))
        previous_data = json_data
        time.sleep(1/sendFrequency)

if __name__ == '__main__':
    main()
